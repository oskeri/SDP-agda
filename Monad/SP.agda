{-# OPTIONS --safe #-}

------------------------------------------------------------------------
-- The simple probability monad
------------------------------------------------------------------------

module Monad.SP where

open import Monad
open import Value

open import Function.Base
open import Data.Integer.Base using (+_)
open import Data.List.Base
open import Data.List.Properties
open import Data.Nat.Base hiding (_/_) renaming (_‚â§_ to _‚â§‚Åø_)
open import Data.Nat.Properties hiding (‚â§-refl)
open import Data.Product.Base hiding (map)
open import Data.Rational.Base using (‚Ñö; 0‚Ñö; _√∑_; _/_) renaming (_+_ to _+‚Ñö_; _*_ to _*‚Ñö_)
open import Relation.Binary.PropositionalEquality
  hiding ([_])
open import Relation.Binary.Bundles
open import Data.List.Sort

open ‚â°-Reasoning

private variable
  A B C : Set
  f g : A ‚Üí B

-- Probabilities are represented as "weights" (natural numbers)
-- The corresponding probability of an entry with weight w is given by
-- w divided by the sum of all weights.

SP : Set ‚Üí Set
SP A = List (‚Ñï √ó A)

-- Sort by probability

sortLowest : SP A ‚Üí SP A
sortLowest {A} xs = sort ord xs
  where
  ord : DecTotalOrder _ _ _
  ord = record
    { Carrier = ‚Ñï √ó A
    ; _‚âà_ = Œª (w , _) (w‚Ä≤ , _) ‚Üí w ‚â° w‚Ä≤
    ; _‚â§_ = Œª (w , _) (w‚Ä≤ , _) ‚Üí w ‚â§‚Åø w‚Ä≤
    ; isDecTotalOrder = record
      { isTotalOrder = record
        { isPartialOrder = record
          { isPreorder = record
            { isEquivalence = record
              { refl = refl
              ; sym = sym
              ; trans = trans
              }
            ; reflexive = ‚â§-reflexive
            ; trans = ‚â§-trans
            }
          ; antisym = ‚â§-antisym
          }
        ; total = Œª _ _ ‚Üí ‚â§-total _ _
        }
      ; _‚âü_ = Œª _ _ ‚Üí _ ‚âü _
      ; _‚â§?_ = Œª _ _ ‚Üí _ ‚â§? _
      }
    }

sortHighest : SP A ‚Üí SP A
sortHighest xs = reverse (sortLowest xs)

-- The total weight

totalWeight : SP A ‚Üí ‚Ñï
totalWeight [] = 0
totalWeight ((w , _) ‚à∑ xs) = w + totalWeight xs

-- Scale all the weights

scaleWeights : ‚Ñï ‚Üí SP A ‚Üí SP A
scaleWeights w xs = map (Œª (w‚Ä≤ , x) ‚Üí w * w‚Ä≤ , x) xs

-- Some properties of the scaling function

scale-scale : (w w‚Ä≤ : ‚Ñï) (xs : SP A)
            ‚Üí scaleWeights w (scaleWeights w‚Ä≤ xs) ‚â° scaleWeights (w * w‚Ä≤) xs
scale-scale w w‚Ä≤ [] = refl
scale-scale w w‚Ä≤ (x ‚à∑ xs) =
  cong‚ÇÇ (_‚à∑_)
    (cong (_, proj‚ÇÇ x) (sym (*-assoc w w‚Ä≤ _)))
    (scale-scale w w‚Ä≤ xs)

scale-++ : (w : ‚Ñï) (xs ys : SP A)
         ‚Üí scaleWeights w (xs ++ ys) ‚â° scaleWeights w xs ++ scaleWeights w ys
scale-++ w [] ys = refl
scale-++ w (x ‚à∑ xs) ys = cong (_ ‚à∑_) (scale-++ w xs ys)

private
  ap·µ£ : (f : A ‚Üí B) ‚Üí ‚Ñï √ó A ‚Üí ‚Ñï √ó B
  ap·µ£ f (w , a) = w , f a

-- SP is a functor

SP-functor : Functor SP
SP-functor = record
  { fmap = fmap
  ; fmap-id = fmap-id
  ; fmap-‚àò = fmap-‚àò
  }
  where
  fmap : (A ‚Üí B) ‚Üí SP A ‚Üí SP B
  fmap f xs = map (ap·µ£ f) xs

  fmap-id : (xs : SP A) ‚Üí fmap id xs ‚â° xs
  fmap-id [] = refl
  fmap-id (x ‚à∑ xs) = cong (_ ‚à∑_) (fmap-id xs)

  fmap-‚àò : (xs : SP A) ‚Üí fmap (f ‚àò g) xs ‚â° fmap f (fmap g xs)
  fmap-‚àò [] = refl
  fmap-‚àò (x ‚à∑ xs) = cong (_ ‚à∑_) (fmap-‚àò xs)

open Functor SP-functor

-- fmap distributes over ++

fmap-++ : (xs ys : SP A)
        ‚Üí fmap f (xs ++ ys) ‚â° fmap f xs ++ fmap f ys
fmap-++ [] ys = refl
fmap-++ (x ‚à∑ xs) ys = cong (_ ‚à∑_) (fmap-++ xs ys)

-- scaleWeights commutes with fmap

scale-fmap : (w : ‚Ñï) (xs : SP A)
           ‚Üí scaleWeights w (fmap f xs) ‚â° fmap f (scaleWeights w xs)
scale-fmap w [] = refl
scale-fmap w (x ‚à∑ xs) = cong (_ ‚à∑_) (scale-fmap w xs)

-- mapping does not change the total weight

fmap-totalWeight : (xs : SP A) ‚Üí totalWeight xs ‚â° totalWeight (fmap f xs)
fmap-totalWeight [] = refl
fmap-totalWeight (x ‚à∑ xs) = cong‚ÇÇ _+_ refl (fmap-totalWeight xs)

-- SP is a monad

SP-monad : Monad SP
SP-monad = record
  { functor = SP-functor
  ; Œ∑ = Œ∑
  ; Œº = Œº
  ; Œº‚àòŒ∑ = Œº‚àòŒ∑
  ; Œº‚àòmapŒ∑ = Œº‚àòmapŒ∑
  ; Œº‚àòŒº = Œº‚àòŒº
  ; map‚àòŒ∑ = map‚àòŒ∑
  ; map‚àòŒº = map‚àòŒº
  }
  where

  Œ∑ : A ‚Üí SP A
  Œ∑ x = [ 1 , x ]

  Œº : SP (SP A) ‚Üí SP A
  Œº [] = []
  Œº ((w , xs) ‚à∑ xss) = scaleWeights w xs ++ Œº xss

  Œº‚àòŒ∑ : (xs : SP A) ‚Üí Œº (Œ∑ xs) ‚â° xs
  Œº‚àòŒ∑ xs = begin
    map (Œª x ‚Üí proj‚ÇÅ x + 0 , proj‚ÇÇ x) xs ++ [] ‚â°‚ü® ++-identity ≥ _ ‚ü©
    map (Œª x ‚Üí proj‚ÇÅ x + 0 , proj‚ÇÇ x) xs       ‚â°‚ü® map-cong (Œª _ ‚Üí cong (_, _) (+-identity ≥ _)) xs ‚ü©
    map (Œª x ‚Üí proj‚ÇÅ x , proj‚ÇÇ x) xs           ‚â°‚ü®‚ü©
    map id xs                                  ‚â°‚ü® map-id xs ‚ü©
    xs                                         ‚àé

  Œº‚àòmapŒ∑ : (xs : SP A) ‚Üí Œº (fmap Œ∑ xs) ‚â° xs
  Œº‚àòmapŒ∑ [] = refl
  Œº‚àòmapŒ∑ (x ‚à∑ xs) = cong‚ÇÇ _‚à∑_ (cong (_, _) (*-identity ≥ _)) (Œº‚àòmapŒ∑ xs)

  Œº++ : (xs ys : SP (SP A)) ‚Üí Œº (xs ++ ys) ‚â° Œº xs ++ Œº ys
  Œº++ [] ys = refl
  Œº++ ((w , x) ‚à∑ xs) ys = begin
    scaleWeights w x ++ Œº (xs ++ ys)   ‚â°‚ü® cong (_ ++_) (Œº++ xs ys) ‚ü©
    scaleWeights w x ++ Œº xs ++ Œº ys   ‚â°Àò‚ü® ++-assoc _ (Œº xs) (Œº ys) ‚ü©
    (scaleWeights w x ++ Œº xs) ++ Œº ys ‚àé

  scale-Œº : (w : ‚Ñï) (xss : SP (SP A)) ‚Üí Œº (scaleWeights w xss) ‚â° scaleWeights w (Œº xss)
  scale-Œº w [] = refl
  scale-Œº w ((w‚Ä≤ , xs) ‚à∑ xss) = begin
    scaleWeights (w * w‚Ä≤) xs ++ Œº (scaleWeights w xss)
      ‚â°‚ü® cong‚ÇÇ _++_ (sym (scale-scale w w‚Ä≤ xs)) (scale-Œº w xss) ‚ü©
    scaleWeights w (scaleWeights w‚Ä≤ xs) ++ scaleWeights w (Œº xss)
      ‚â°Àò‚ü® scale-++ w (scaleWeights w‚Ä≤ xs) (Œº xss) ‚ü©
    scaleWeights w (scaleWeights w‚Ä≤ xs ++ Œº xss) ‚àé

  Œº‚àòŒº : (xsss : SP (SP (SP A))) ‚Üí Œº (Œº xsss) ‚â° Œº (fmap Œº xsss)
  Œº‚àòŒº [] = refl
  Œº‚àòŒº ((w , xs) ‚à∑ xss) = begin
    Œº (scaleWeights w xs ++ Œº xss)          ‚â°‚ü® Œº++ (scaleWeights w xs) (Œº xss) ‚ü©
    Œº (scaleWeights w xs) ++ Œº (Œº xss)      ‚â°‚ü® cong‚ÇÇ _++_ (scale-Œº w xs) (Œº‚àòŒº xss) ‚ü©
    scaleWeights w (Œº xs) ++ Œº (fmap Œº xss) ‚àé

  map‚àòŒ∑ : (f : A ‚Üí B) (x : A) ‚Üí fmap f (Œ∑ x) ‚â° Œ∑ (f x)
  map‚àòŒ∑ f x = refl

  map‚àòŒº : (f : A ‚Üí B) (xss : SP (SP A)) ‚Üí fmap f (Œº xss) ‚â° Œº (fmap (fmap f) xss)
  map‚àòŒº f [] = refl
  map‚àòŒº f ((w , xs) ‚à∑ xss) = begin
    fmap f (scaleWeights w xs ++ Œº xss)
      ‚â°‚ü® fmap-++ (scaleWeights w xs) (Œº xss) ‚ü©
    fmap f (scaleWeights w xs) ++ fmap f (Œº xss)
      ‚â°‚ü® cong‚ÇÇ _++_ (sym (scale-fmap w xs)) (map‚àòŒº f xss) ‚ü©
    scaleWeights w (fmap f xs) ++ Œº (fmap (fmap f) xss) ‚àé

-- An "expectation value" function

module EV
  (val : Value)
  (open Value.Value val)
  (ev-helper : ‚Ñï ‚Üí (‚Ñï √ó Val) ‚Üí Val)
  (ev-helper-mono : {A : Set} {f g : A ‚Üí Val}
                  ‚Üí f ‚â§‚Çó g ‚Üí (w w‚Ä≤ : ‚Ñï) (a : A)
                  ‚Üí ev-helper w (w‚Ä≤ , f a) ‚â§ ev-helper w (w‚Ä≤ , g a))
  where

  ev : SP Val ‚Üí Val
  ev xs = foldr _‚äï_ ùüò (map (ev-helper (totalWeight xs)) xs)

  ev-mono : f ‚â§‚Çó g ‚Üí (xs : SP A) ‚Üí ev (fmap f xs) ‚â§ ev (fmap g xs)
  ev-mono {A} {f} {g} f‚â§g xs =
    subst‚ÇÇ (Œª x y ‚Üí foldr _‚äï_ ùüò (map (ev-helper x) (fmap f xs)) ‚â§ foldr _‚äï_ ùüò (map (ev-helper y) (fmap g xs)))
      (fmap-totalWeight xs) (fmap-totalWeight xs)
      (lemma (totalWeight xs) f‚â§g xs)
    where
    lemma : (w : ‚Ñï) ‚Üí f ‚â§‚Çó g ‚Üí (xs : SP A)
          ‚Üí foldr _‚äï_ ùüò (map (ev-helper w) (fmap f xs)) ‚â§ foldr _‚äï_ ùüò (map (ev-helper w) (fmap g xs))
    lemma w f‚â§g [] = ‚â§-refl
    lemma w f‚â§g ((w‚Ä≤ , x) ‚à∑ xs) =
      ‚äï-mono (ev-helper-mono f‚â§g w w‚Ä≤ x) (lemma w f‚â§g xs)
