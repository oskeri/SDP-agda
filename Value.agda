{-# OPTIONS --safe #-}

------------------------------------------------------------------------
-- The type of values of SDP:s
------------------------------------------------------------------------

module Value where

open import Relation.Binary.Structures
open import Algebra.Structures
open import Relation.Binary.PropositionalEquality
open import Relation.Binary.Reasoning.Preorder

private variable
  A : Set

-- Values

record Value (Val : Set) : Setโ where
  field
    -- There is a zero value
    ๐ : Val
    -- There is "addition" for values
    _โ_ : Val โ Val โ Val

    -- Values have a total preorder
    _โค_ : Val โ Val โ Set
    Val-preorder : IsTotalPreorder _โก_ _โค_

    -- _โ_ is monotone
    โ-mono : โ {a b c d} โ a โค b โ c โค d
           โ a โ c โค b โ d

  module โค-Reasoning = Relation.Binary.Reasoning.Preorder
    (record { Carrier = Val ; _โ_ = _โก_ ; _โฒ_ = _โค_
            ; isPreorder = IsTotalPreorder.isPreorder Val-preorder })

  -- Lifted monoidal operation to functions
  _โโ_ : (f g : A โ Val) โ A โ Val
  f โโ g = ฮป a โ f a โ g a

  -- Lifted order relation to functions
  _โคโ_ : (f g : A โ Val) โ Set
  f โคโ g = โ a โ f a โค g a

  infixl 7 _โ_
  infixl 7 _โโ_
  infix  4 _โค_
  infix  4 _โคโ_

  open IsTotalPreorder Val-preorder public
    using ()
    renaming (refl to โค-refl; trans to โค-trans; total to โค-total)
